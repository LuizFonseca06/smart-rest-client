# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Rafael Henter
# This file is distributed under the same license as the Smart Rest Client
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Smart Rest Client 0.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-01 13:34-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/index.rst:2
msgid "Smart Rest Client"
msgstr ""

#: ../../source/index.rst:4
msgid ""
"Smart API Client is an Wrapper to perform requests to Rest APIs using "
"objects to request endpoints and their methods"
msgstr ""

#: ../../source/index.rst:8
msgid "User Guide"
msgstr ""

#: ../../source/example.rst:2
msgid "Base Settings"
msgstr ""

#: ../../source/example.rst:4
msgid ""
"Create a clients.py file in the core folder of your project, if you "
"haven't, created it within your project folder to be simple to be "
"imported from anywhere in the project with the following content:"
msgstr ""

#: ../../source/example.rst:43
msgid ""
"The name of this variable will be the name of the client that you can use"
" throughout your project"
msgstr ""

#: ../../source/example.rst:44
msgid ""
"It is recommended that the production use a set of configurations without"
" configurations.py to change the simple way or the name of the API "
"without the need to create several."
msgstr ""

#: ../../source/example.rst:45
msgid ""
"In our case, we have the option of \"production\" and \"localhost\", the "
"factory generates the customer according to the name used and the "
"parameters identified in it"
msgstr ""

#: ../../source/example.rst:48
msgid ""
"Let's imagine which client is located in a folder called clients on "
"project folder (folder containing the settings.py file)"
msgstr ""

#: ../../source/example.rst:51
msgid "Example"
msgstr ""

#: ../../source/example.rst:53
msgid "Import the api_client from your client.py file"
msgstr ""

#: ../../source/index.rst:21
msgid "Development"
msgstr ""

#: ../../source/index.rst:33
msgid "Downloads"
msgstr ""

#: ../../source/index.rst:35
msgid ""
"`PDF <https://readthedocs.org/projects/smart-rest-"
"client/downloads/pdf/latest/>`_"
msgstr ""

#: ../../source/index.rst:37
msgid ""
"`Epub <https://readthedocs.org/projects/smart-rest-"
"client/downloads/epub/latest/>`_"
msgstr ""

#: ../../source/index.rst:41
msgid "Changelog"
msgstr ""

#~ msgid ""
#~ "Smart Rest Client is a client for"
#~ " APIs in general, which allows "
#~ "iterating with the API as if they"
#~ " were using a Local model in "
#~ "their project, through a client and "
#~ "Custom CBV (Class based Views)"
#~ msgstr ""

#~ msgid ""
#~ "For more information, see our "
#~ "documentation at `Read the Docs <http"
#~ "://smart-rest-client.readthedocs.io/en/latest/>`_."
#~ msgstr ""

#~ msgid "Other"
#~ msgstr ""

#~ msgid "Welcome to Smart Rest Client documentation!"
#~ msgstr ""

#~ msgid "Smart Rest Client Documentação"
#~ msgstr ""

#~ msgid ""
#~ "The Smart Rest Client is an API"
#~ " response wrapper, which allows you "
#~ "to iterate through the API as if"
#~ " they were using a local model "
#~ "/ object in your project. Whether "
#~ "through the direct customer in an "
#~ "FBV or using personalized CBV (class-"
#~ "based displays), this framework tries to"
#~ " make this communication as easy as"
#~ " possible"
#~ msgstr ""

#~ msgid "Smart Rest Client Documentation"
#~ msgstr ""

#~ msgid ""
#~ "The Smart Rest Client is an API"
#~ " response wrapper, which translates "
#~ "Django's native calls when using a "
#~ "view to a particular REST API. "
#~ "Whether using the API client directly"
#~ " in a FBV (Function-based View) "
#~ "or using CBV (Class-based View), "
#~ "this library makes this communication as"
#~ " transparent and easy as possible"
#~ msgstr ""

#~ msgid "Some reasons to use the **Smart Rest Client**"
#~ msgstr ""

#~ msgid ""
#~ "If you work with microservices with "
#~ "APIs in multiple locations and want "
#~ "to continue using Django as a "
#~ "WebApp with the same capabilities to "
#~ "render data as if you were using"
#~ " native models"
#~ msgstr ""

#~ msgid ""
#~ "You want to separate your Django "
#~ "project to let one of them only"
#~ " with the API with DRF and the"
#~ " other as a WebApp with Templates "
#~ "(HTML), CSS, JS instead of using "
#~ "some JS frontend (ReactJS, AngularJS, "
#~ "etc.)"
#~ msgstr ""

#~ msgid ""
#~ "You want to use a third party "
#~ "API to list, create and change "
#~ "using the django template system"
#~ msgstr ""

#~ msgid "Quickstart"
#~ msgstr ""

#~ msgid ""
#~ "Add this settings in your project "
#~ "``settings.py`` file to access your API"
#~ msgstr ""

#~ msgid ""
#~ "The details of the configuration will"
#~ " be better explained in the "
#~ "documentation"
#~ msgstr ""

#~ msgid ""
#~ "The name of this variable will be"
#~ " the name of the customer that "
#~ "you will import into every project"
#~ msgstr ""

#~ msgid ""
#~ "It is recommended that the name "
#~ "comes from a constant in the "
#~ "settings.py file, and if possible it "
#~ "can even be an environment variable."
#~ msgstr ""

#~ msgid ""
#~ "In our case, we have 2 "
#~ "options,\"production\" and \"localhost\", the "
#~ "factory generates a `api client` "
#~ "according to the name used and the"
#~ " parameters identified in it"
#~ msgstr ""

#~ msgid ""
#~ "Now we are going to list the "
#~ "data using the Django template system"
#~ " default"
#~ msgstr ""

#~ msgid ""
#~ "The client will generate a user-"
#~ "friendly structure for each endpoint. "
#~ "Example with the endpoint */order/orders/*:"
#~ msgstr ""

#~ msgid "In your template you can use the forms and pagination snippets. E.g:"
#~ msgstr ""

#~ msgid "Example using Bootstrap Styles(CSS)"
#~ msgstr ""

#~ msgid ""
#~ "includes/form_search.html: Form with search "
#~ "input. This ``include`` support placeholder"
#~ " too."
#~ msgstr ""

#~ msgid ""
#~ "includes/form_paginate_by.html: Select form to "
#~ "choose how many elements the page "
#~ "will be paginate. Ex: by (20, 40,"
#~ " 60, etc ...)"
#~ msgstr ""

#~ msgid ""
#~ "includes/list_paginator.html: Block with pagination"
#~ " elements with the number of pages"
#~ " buttons, previous and next"
#~ msgstr ""

#~ msgid "What does that mean?"
#~ msgstr ""

#~ msgid ""
#~ "That the API Client will always "
#~ "generate the structure according to the"
#~ " names of their endpoints"
#~ msgstr ""

#~ msgid ""
#~ "`PDF <https://readthedocs.org/projects/django-api-"
#~ "client/downloads/pdf/latest/>`_"
#~ msgstr ""

#~ msgid ""
#~ "`Epub <https://readthedocs.org/projects/django-api-"
#~ "client/downloads/epub/latest/>`_"
#~ msgstr ""

#~ msgid ""
#~ "The API Client is an Wrapper to"
#~ " perform requests to Rest APIs using"
#~ " objects to request endpoints and "
#~ "their methods"
#~ msgstr ""

#~ msgid ""
#~ "Now we are going to list the "
#~ "data using the normal Django template"
#~ " system"
#~ msgstr ""

